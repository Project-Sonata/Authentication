package com.odeyalo.sonata.authentication.repository;

import com.odeyalo.sonata.authentication.entity.ConfirmationCode;
import com.odeyalo.sonata.authentication.testing.factory.ConfirmationCodeRepositoryTestingFactory;
import com.odeyalo.sonata.authentication.testing.faker.ConfirmationCodeFaker;
import org.apache.commons.lang3.RandomUtils;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

/**
 * Unit tests for {@link InMemoryConfirmationCodeRepository}
 */
class InMemoryConfirmationCodeRepositoryTest {

    @Test
    @DisplayName("Find the confirmation code in empty repo and expect nothing to return")
    void findConfirmationCodeByCodeValueInEmptyRepo_andExpectNothingAsResult() {
        // given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemory();
        String codeValue = "odeyalo";
        // When
        Optional<ConfirmationCode> result = repo.findConfirmationCodeByCodeValue(codeValue);
        // Then
        assertThat(result)
                .as("Empty repository must not return not existing code and must return empty Optional")
                .isEmpty();
    }

    @Test
    @DisplayName("Find not existing  confirmation code in non-empty repo and expect nothing to return")
    void findNotExistingConfirmationCodeByCodeValueInNonEmptyRepo_andExpectNothingAsResult() {
        // given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandom();
        long beforeFindCount = repo.count();
        String codeValue = "odeyalo";
        // When
        Optional<ConfirmationCode> result = repo.findConfirmationCodeByCodeValue(codeValue);
        // Then
        assertThat(result)
                .as("Empty repository must not return not existing code and must return empty Optional")
                .isEmpty();

        assertThat(repo.count())
                .as("The size of the repository must not be changed if 'find*' method was called")
                .isSameAs(beforeFindCount);
    }

    @Test
    @DisplayName("Find existing  confirmation code in non-empty repo and expect confirmation code to be returned")
    void findExistingConfirmationCodeByCodeValueInNonEmptyRepo_andExpectValueCodeAsResult() {
        // given
        String codeValue = "odeyalo";
        ConfirmationCode expectedConfirmationCode = ConfirmationCodeFaker.withBody(codeValue).get();

        Map<Long, ConfirmationCode> codes = Map.of(
                expectedConfirmationCode.getId(), expectedConfirmationCode
        );

        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandomMerged(codes);

        long beforeFindCount = repo.count();

        // When
        Optional<ConfirmationCode> result = repo.findConfirmationCodeByCodeValue(codeValue);

        // Then
        assertThat(result)
                .describedAs("The value must be presented and be the same as provided before!")
                .hasValue(expectedConfirmationCode);

        assertThat(repo.count())
                .as("The size of the repository must not be changed if 'find*' method was called")
                .isSameAs(beforeFindCount);
    }

    @Test
    @DisplayName("Save the confirmation code with id and expect code to be saved")
    void saveConfirmationCodeWithID_andExpectCodeToBeSaved() {
        // Given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemory();
        ConfirmationCode expectedCode = ConfirmationCodeFaker.numeric().get();
        long beforeSaveCount = repo.count();
        // When
        ConfirmationCode savedCode = repo.save(expectedCode);

        // Then
        long afterSaveCount = repo.count();

        assertThat(savedCode)
                .describedAs("If the code contains the ID, then code must be saved without any changes!")
                .isEqualTo(expectedCode);

        assertThat(afterSaveCount)
                .describedAs("If the confirmation code was saved, then size of the repo must be changed!")
                .isSameAs(beforeSaveCount + 1);

        Optional<ConfirmationCode> actualCode = repo.findConfirmationCodeByCodeValue(expectedCode.getCode());

        assertThat(actualCode)
                .describedAs("Confirmation code must be saved and must be accessible!")
                .hasValue(expectedCode);
    }


    @Test
    @DisplayName("Save the confirmation code without id and expect code to be saved with generated id")
    void saveConfirmationCodeWithoutID_andExpectCodeToBeSavedWithAutoGeneratedID() {
        // Given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemory();
        ConfirmationCode expectedCode = ConfirmationCodeFaker.numeric().nullId().get();
        long beforeSaveCount = repo.count();

        // When
        ConfirmationCode savedCode = repo.save(expectedCode);

        // Then
        long afterSaveCount = repo.count();

        Long autoGeneratedId = savedCode.getId();

        assertThat(autoGeneratedId)
                .describedAs("If the confirmation code does not contain the ID, then ID must be automatically generated!")
                .isNotNull();

        assertThat(afterSaveCount)
                .describedAs("If the confirmation code was saved, then size of the repo must be changed!")
                .isSameAs(beforeSaveCount + 1);

        Optional<ConfirmationCode> actualCode = repo.findConfirmationCodeByCodeValue(expectedCode.getCode());

        assertThat(actualCode)
                .describedAs("Confirmation code must be saved and must be accessible!")
                .hasValue(expectedCode);

        Optional<ConfirmationCode> byId = repo.findById(autoGeneratedId);

        assertThat(byId)
                .describedAs("If id is generated automatically, then entity must be accessible using ID")
                .hasValue(savedCode);
    }

    @Test
    @DisplayName("Save the null confirmation code and expect nothing to save and IllegalArgumentException to be thrown")
    void saveNull_andExpectExceptionToBeThrown() {
        // Given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemory();
        long beforeSaveCount = repo.count();

        // when and then
        assertThatThrownBy(() -> repo.save(null))
                .describedAs("If the entity is null, then IllegalArgumentException must be thrown!")
                .isExactlyInstanceOf(IllegalArgumentException.class);

        long afterSaveCount = repo.count();

        assertThat(beforeSaveCount)
                .describedAs("If the value has not been saved, then size must not be changed")
                .isSameAs(afterSaveCount);
    }

    @Test
    @DisplayName("Delete the entity by not existing id and expect nothing to be deleted in empty repo")
    void deleteByIdInEmptyRepo_andExpectNothingToBeDeleted() {
        // Given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemory();
        Long notExistingId = 1L;
        long beforeCount = repo.count();
        // When
        repo.deleteById(notExistingId);

        // then
        long afterCount = repo.count();

        assertThat(beforeCount)
                .describedAs("The size of the repository must not be changed if nothing was deleted!")
                .isSameAs(afterCount);
    }

    @Test
    @DisplayName("Delete the entity by not existing id in not empty repository and expect nothing to be deleted")
    void deleteByIdInNonEmptyRepo_andExpectNothingToBeDeleted() {
        // Given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandom();
        Long notExistingId = RandomUtils.nextLong(1, 100);

        long beforeCount = repo.count();
        Map<Long, ConfirmationCode> beforeDeleteAll = repo.getAll();
        // When
        repo.deleteById(notExistingId);

        // then
        long afterCount = repo.count();

        Map<Long, ConfirmationCode> afterDeleteAll = repo.getAll();

        assertThat(beforeCount)
                .describedAs("The size of the repository must not be changed if nothing was deleted!")
                .isSameAs(afterCount);

        assertThat(beforeDeleteAll)
                .describedAs("Repository entities must be not affected if nothing was deleted!")
                .isEqualTo(afterDeleteAll);
    }

    @Test
    @DisplayName("Delete null entity and expect IllegalArgumentException to be thrown")
    void deleteByIdNullEntityInRepo_andExpectNothingToBeDeletedAndExceptionToBeThrown() {
        // Given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemory();
        long beforeCount = repo.count();

        // When
        assertThatThrownBy(() -> repo.deleteById(null))
                .describedAs("If the ID is null, then IllegalArgumentException must to be thrown!")
                .isExactlyInstanceOf(IllegalArgumentException.class);

        // then
        long afterCount = repo.count();

        assertThat(beforeCount)
                .describedAs("The size of the repository must not be changed if nothing was deleted!")
                .isSameAs(afterCount);
    }


    @Test
    @DisplayName("Delete by id existing entity and expect entity to be deleted")
    void deleteByIDExistingEntity_andExpectEntityToBeDeleted() {
        // Given
        ConfirmationCode confirmationCode = ConfirmationCodeFaker.numeric().get();
        Long codeId = confirmationCode.getId();
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandomMerged(Map.of(
                codeId, confirmationCode
        ));
        long beforeDeleteCount = repo.count();
        // when
        repo.deleteById(codeId);

        // then
        long afterDeleteCount = repo.count();

        assertThat(afterDeleteCount)
                .describedAs("If the entity was deleted, then the size of the repo must be changed!")
                .isSameAs(beforeDeleteCount - 1);

        Optional<ConfirmationCode> foundById = repo.findById(codeId);

        assertThat(foundById)
                .describedAs("If entity was deleted, then it must be removed!")
                .isEmpty();

        Optional<ConfirmationCode> foundByValue = repo.findConfirmationCodeByCodeValue(confirmationCode.getCode());

        assertThat(foundByValue)
                .describedAs("If entity was deleted, then it must be removed!")
                .isEmpty();

    }

    @Test
    @DisplayName("Delete by not existing code value and expect nothing to be deleted")
    void deleteByNotExistingCodeValue_andExpectNothingToBeDeleted() {
        // given
        String notExistingCode = "odeyalo + love = nothing";
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandom();
        Map<Long, ConfirmationCode> beforeDelete = repo.getAll();
        // when
        repo.deleteByCodeValue(notExistingCode);

        // then
        Map<Long, ConfirmationCode> afterDelete = repo.getAll();

        assertThat(beforeDelete)
                .describedAs("If nothing was deleted, then repository must contain exactly the same values as before!")
                .isEqualTo(afterDelete);
    }

    @Test
    @DisplayName("Delete by existing code value and expect entity to be deleted")
    void deleteByExistingCodeValue_andExpectEntityToBeDeleted() {
        // given
        String existingCodeValue = "Miku is the best<3<3";
        ConfirmationCode confirmationCode = ConfirmationCodeFaker.withBody(existingCodeValue).get();
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandomMerged(
                Map.of(confirmationCode.getId(), confirmationCode)
        );
        // when
        Optional<ConfirmationCode> actualCode = repo.findConfirmationCodeByCodeValue(existingCodeValue);

        // then
        assertThat(actualCode)
                .describedAs("If entity with code value exists in repository, then this entity must be returned!")
                .hasValue(confirmationCode);
    }

    @Test
    @DisplayName("Delete by null entity  value and expect IllegalArgumentException to be thrown")
    void deleteByNullEntity_andExpectExceptionToBeThrown() {
        // given
        InMemoryConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefinedRandom();
        // then
        assertThatThrownBy(() -> repo.deleteByCodeValue(null))
                .describedAs("If the code value is null, then IllegalArgumentException must be thrown!")
                .isExactlyInstanceOf(IllegalArgumentException.class);
    }

    @Test
    @DisplayName("Count the empty repo and expect 0 as result")
    void countEmptyRepo_andExpectZero() {
        // Given
        ConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.create();
        // when
        long count = repo.count();
        // then
        assertThat(count).describedAs("count() method must return 0(zero) if repository is empty!");
    }
    @Test
    @DisplayName("Verify that the size of the repository matches the provided size exactly ")
    void countRepo_andExpectExactlySameSizeAsProvided() {
        long createdCodesNumber = 2L;
        ConfirmationCode code1 = ConfirmationCodeFaker.numeric().get();
        ConfirmationCode code2 = ConfirmationCodeFaker.numeric().get();
        // Given
        ConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefined(
                Map.of(
                        code1.getId(), code1,
                        code2.getId(), code2)
        );
        // when
        long count = repo.count();
        // then
        assertThat(count)
                .describedAs("count() method must return number of saved entity in repository!")
                .isSameAs(createdCodesNumber);

    }
    @Test
    @DisplayName("Verify count is incremented if the entity was saved")
    void countRepoAfterSave_andExpectCountToBeIncremented() {
        long createdCodesNumber = 2L;
        ConfirmationCode code1 = ConfirmationCodeFaker.numeric().get();
        ConfirmationCode code2 = ConfirmationCodeFaker.numeric().get();
        // Given
        ConfirmationCodeRepository repo = ConfirmationCodeRepositoryTestingFactory.inMemoryPredefined(
                Map.of(
                        code1.getId(), code1,
                        code2.getId(), code2)
        );
        // when
        repo.save(ConfirmationCodeFaker.numeric().get());
        long count = repo.count();
        // then
        assertThat(count)
                .describedAs("count() method must be incremented if the entity was saved!")
                .isSameAs(createdCodesNumber + 1);
    }
}
